#!/bin/bash

function log() {
    echo "$@"
}

function echoerr() {
    echo "$@" 1>&2
}

function genpassword() {
    echo $(pwgen 48 1)
}

function stdbool() {
    if [ -z "$1" ] ; then
        echo "n"
    else
        echo ${1:0:1} | tr [A-Z] [a-z]
    fi
}

# Reads the given environment variable name, detects if its a file and templates
# it out to the given output file path. Optionally allows the process to be skipped
# if the value is blank.
# Usage: handle_file_input_envvar <options> ENVVAR OUTFILE
# Valid options: --can-disable --allow-blank --append
function handle_file_input_envvar() {
    local can_disable allow_blank do_append

    while true; do
        case $1 in
        --can-disable) can_disable=y ; shift ;;
        --allow-blank) allow_blank=y ; shift ;;
        --append) do_append=y ; shift ;;
        *)
            if [ "${1:0:2}" != "--" ] ; then
                break
            else  
                log "handle_file_input_envvar: Unknown option received: $1"
                exit 1
            fi
            ;;
        esac
    done

    local envvar="$1"
    local outfile="$2"
    
    # Sanity checks
    if [ "$#" -ne 2 ] ; then
        log "handle_file_input_envvar: Got $# arguments, expected 2."
        exit 1
    fi
    
    eval local envval="\$$envvar"

    if [ "${can_disable}" = "y" ] && [ "${envval}" = "disabled" ] ; then
        log "$envvar disabled by user requested."
        return
    elif [ "${envval}" = "disabled" ] ; then
        log "$envvar is set to \"disabled\" but this value is mandatory."
        exit 1
    fi
    
    if [ -z "${envval}" ] && [ "y" != "${allow_blank}" ]; then
        log "$envvar is blank instead of being explicitly disabled and must contain a value."
        exit 1
    fi
    
    if [ "${envval:0:1}" = "/" ] ; then
        log "$envvar is path."
        if [ ! -e "$envval" ] ; then
            log "$envval does not exist."
            exit 1
        fi
        
        if [ "$do_append" = "y" ] ; then
            cat "$envval" >> "$outfile"
        else
            cat "$envval" > "$outfile"
        fi
    else
        log "$envvar is literal."

        if [ "$do_append" = "y" ] ; then
            echo -n "$envval" >> "$outfile"
        else
            echo -n "$envval" > "$outfile"
        fi
    fi
}

if [ -z $HOSTNAME ] ; then
    HOSTNAME=$(hostname -f)
fi

log "Starting up with hostname: $HOSTNAME"

export DATA_DIR=/data
export UNIFI_DATA_DIR=${DATA_DIR}/unifi-controller

log "Ensuring persistent data status..."
if ! mountpoint ${DATA_DIR} && [ $(stdbool "$DEV_ALLOW_EPHEMERAL_DATA") != "y" ] ; then
    echoerr "DATA_DIR is not a mountpoint. Refusing to run with ephemeral data directory."
    exit 1
else
    echoerr "WARNING: allowing an ephemeral data directory."
    mkdir -m 755 -p "$DATA_DIR"
fi
chown root:root ${DATA_DIR}
chmod 0755 ${DATA_DIR}

log "Ensuring ${UNIFI_DATA_DIR} is owned and accessible properly"
mkdir -p \
    "${UNIFI_DATA_DIR}" \
    "${UNIFI_DATA_DIR}/data" \
    "${UNIFI_DATA_DIR}/work"
chown root:root \
    "${UNIFI_DATA_DIR}" \
    "${UNIFI_DATA_DIR}/data" \
    "${UNIFI_DATA_DIR}/work"
chmod 0755 \
    "${UNIFI_DATA_DIR}" \
    "${UNIFI_DATA_DIR}/data" \
    "${UNIFI_DATA_DIR}/work"

#powerdns_apikey_file=${POWERDNS_DATA}/api-key.powerdns
## TODO: this is a temporary measure. It wraps basic auth around the entire
## REST API. In the future authentication will do an LDAP lookup and implement
## middleware for users.
## Note: this MUST be exported as nginx needs to know where it is.
#export powerdns_admin_htpasswd=${DATA_DIR}/admin.htpasswd

#if [ -z "$API_KEY" ] ; then
#    if [ ! -e "$powerdns_apikey_file" ]; then
#        log "Generating api-key for powerdns REST API"
#        API_KEY=$(genpassword)
#        echo -n "$API_KEY" > $powerdns_apikey_file
#    else
#        log "Loaded api-eky for powerdns REST API"
#        API_KEY="$(cat $powerdns_apikey_file)"
#    fi
#fi

#if [ -z "$API_ADMIN_USER" ] ; then
#    echoerr "No API_ADMIN_USER specified. This is required for the time being."
#    exit 1
#fi

#if [ -z "$API_ADMIN_PASSWORD" ] && [ "$API_AUTH" != "disabled" ] ; then
#    echoerr "No API_ADMIN_PASSWORD specified. This is required for the time being."
#    exit 1
#fi

# Force update the htpasswd file with the correct credentials
#log "Force updating: $powerdns_admin_htpasswd"
#echo "$API_ADMIN_PASSWORD" | htpasswd -ci "$powerdns_admin_htpasswd" "$API_ADMIN_USER"
#if [ $? != 0 ] ; then
#    echoerr "Error creating htpasswd file for API access."
#    exit 1
#fi
#chown root:www-data "$powerdns_admin_htpasswd"
#chmod 640 "$powerdns_admin_htpasswd"

#if [ -z "${SSL_SERVER_CERT}" ] && [ -z "${SSL_SERVER_KEY}" ] ; then
#    if [ "$(stdbool $DEV_ALLOW_SELF_SIGNED)" != "y" ] ; then
#        echoerr "SSL_SERVER_CERT and SSL_SERVER_KEY are blank but self-signed certificates are not allowed."    
#        exit 1
#    fi
#    
#    log "SSL_SERVER_CERT and SSL_SERVER_KEY are blank. Generating self-signed certificate."
#    log "SSL_CERTCHAIN will be ignored."
#    SSL_CERTCHAIN=""
#    openssl req -x509 -newkey rsa:4096 \
#        -keyout /run/generated.pem \
#        -out /run/generated.crt \
#        -days 3065 -nodes \
#        -subj "/CN=$HOSTNAME"
#    if [ $? != 0 ]; then
#        echoerr "Self-signed certificate generation failed."
#        exit 1
#    fi
#    export SSL_SERVER_CERT=/run/generated.crt
#    export SSL_SERVER_KEY=/run/generated.pem
#fi

#if [ -z "${SSL_SERVER_CERT}" ] ; then
#    log "SSL_SERVER_CERT is blank but other SSL fields are not. This is invalid."
#    exit 1
#fi

#if [ -z "${SSL_SERVER_KEY}" ] ; then
#    log "SSL_SERVER_KEY is blank but other SSL fields are not. This is invalid."
#    exit 1
#fi

#log "Ensuring $RECURSOR_DATA_DIR exists"
#mkdir -m 775 -p "$RECURSOR_DATA_DIR"

#log "Checking permissions on $RECURSOR_DATA_DIR..."
#chmod 700 "$RECURSOR_DATA_DIR"
#chown -R pdns "$RECURSOR_DATA_DIR"

#handle_file_input_envvar                SSL_SERVER_CERT         /run/nginx-cert.crt
#handle_file_input_envvar --append --allow-blank SSL_SERVER_CERTCHAIN    /run/nginx-cert.crt
#handle_file_input_envvar                SSL_SERVER_KEY          /run/nginx-key.pem

## Propagate DEV_ENABLE_TRACE for recursor.conf environment.
#export DEV_ENABLE_TRACE=$(stdbool $DEV_ENABLE_TRACE)

#log "Templating powerdns configuration..."
#mkdir -p /run/powerdns
#p2 -t /etc/powerdns/recursor.conf.p2 -o /run/powerdns/recursor.conf || ( echoerr "Templating pdns config failed." ; exit 1 )
#chmod 644 /run/powerdns/recursor.conf
#log "Templating nginx configuration..."
#p2 -t /etc/nginx/nginx.conf.p2 -o /run/nginx.conf || ( echoerr "Templating nginx config failed." ; exit 1 )
#chmod 644 /run/nginx.conf
log "Templating syslog-ng configuration..."
export SERVICES="$(ls -1 /etc/services | tr '\n' ' ') unifi-server unifi-mongodb"
p2 -t /etc/syslog-ng.conf.p2 -o /run/syslog-ng.conf || ( echoerr "Templating syslog-ng config failed." ; exit 1 )
chmod 644 /run/syslog-ng.conf

log "Create logging fifo directory"
mkdir -p /run/log

#log "Create nginx cache directory"
#mkdir -p /tmp/nginx
#chown root:www-data /tmp/nginx
#chmod 770 /tmp/nginx

# This structure ensures we can CTRL+C on the desktop.
cp -af /etc/services /run/services
runsvdir /run/services &
PID=$!
trap "kill -TERM $PID" INT TERM
wait $PID
wait $PID
exit $?
